# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  menu(relativePath: String): Menu!
  menuConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MenuFilter): MenuConnection!
}

input DocumentFilter {
  menu: MenuFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Menu | Folder

type MenuCategoriesItemsSubItems {
  id: String
  name: String
  description: String
}

type MenuCategoriesItems {
  id: Float
  name: String
  description: String
  price: Float
  image: String
  available: Boolean
  calories: Float
  protein: String
  isCombo: Boolean
  maxSelections: Float
  subItems: [MenuCategoriesItemsSubItems]
}

type MenuCategories {
  id: Float
  name: String
  items: [MenuCategoriesItems]
}

type Menu implements Node & Document {
  categories: [MenuCategories]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input MenuCategoriesItemsSubItemsFilter {
  id: StringFilter
  name: StringFilter
  description: StringFilter
}

input MenuCategoriesItemsFilter {
  id: NumberFilter
  name: StringFilter
  description: StringFilter
  price: NumberFilter
  image: ImageFilter
  available: BooleanFilter
  calories: NumberFilter
  protein: StringFilter
  isCombo: BooleanFilter
  maxSelections: NumberFilter
  subItems: MenuCategoriesItemsSubItemsFilter
}

input MenuCategoriesFilter {
  id: NumberFilter
  name: StringFilter
  items: MenuCategoriesItemsFilter
}

input MenuFilter {
  categories: MenuCategoriesFilter
}

type MenuConnectionEdges {
  cursor: String!
  node: Menu
}

type MenuConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MenuConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateMenu(relativePath: String!, params: MenuMutation!): Menu!
  createMenu(relativePath: String!, params: MenuMutation!): Menu!
}

input DocumentUpdateMutation {
  menu: MenuMutation
  relativePath: String
}

input DocumentMutation {
  menu: MenuMutation
}

input MenuCategoriesItemsSubItemsMutation {
  id: String
  name: String
  description: String
}

input MenuCategoriesItemsMutation {
  id: Float
  name: String
  description: String
  price: Float
  image: String
  available: Boolean
  calories: Float
  protein: String
  isCombo: Boolean
  maxSelections: Float
  subItems: [MenuCategoriesItemsSubItemsMutation]
}

input MenuCategoriesMutation {
  id: Float
  name: String
  items: [MenuCategoriesItemsMutation]
}

input MenuMutation {
  categories: [MenuCategoriesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
